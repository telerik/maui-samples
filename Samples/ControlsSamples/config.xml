<?xml version="1.0" encoding="utf-8"?>
<Configuration>
  <HeaderTitle>Telerik UI for .NET MAUI</HeaderTitle>
  <HeaderIcon>Logo.png</HeaderIcon>
  <SplashTitle>Developer Focused Examples</SplashTitle>
  <SplashIcon>Splash.png</SplashIcon>
  <SplashInfo>This application contains variety of scenarios demonstrating different capabilities and customizations of the Telerik UI for .NET MAUI component suite</SplashInfo>
  <DocumentationUrl>https://docs.telerik.com/devtools/maui/controls/introduction</DocumentationUrl>
  <FeedbackPortalUrl>https://feedback.telerik.com/maui/</FeedbackPortalUrl>
  <DownloadTrialUrl>https://www.telerik.com/maui-ui?utm_medium=product&amp;utm_source=appstoresamp&amp;utm_campaign=maui-awareness-maui-qsf-showcase</DownloadTrialUrl>
  <ExampleCodeUrl>https://github.com/telerik/maui-samples/tree/main/Samples/ControlsSamples/Examples</ExampleCodeUrl>
	
  <Controls>

    <Control>
      <Name>BadgeView</Name>
      <DisplayName>BadgeView</DisplayName>
      <Icon>badgeview.png</Icon>
      <ShortDescription>Badges can be used for an additional marker for any element.</ShortDescription>
      <FullDescription>Telerik BadgeView allows you to display badges in your application. To decorate avatars, navigation menus, or other components in the application when the visual notification is needed.</FullDescription>
      <Examples>
        <Example>
          <Name>FirstLook</Name>
          <Page>FirstLookView</Page>
          <DisplayName>First Look</DisplayName>
          <Icon>badgeview.png</Icon>
          <Description>This example presents a message app with different badges for visual notifications like avatars with different statuses, message counters, notifications for missed calls and unread messages.</Description>
        </Example>
        <Example>
          <Name>Configuration</Name>
          <Page>ConfigurationView</Page>
          <DisplayName>Configuration</DisplayName>
          <Icon>badgeview.png</Icon>
          <Description>This example presents the various configuration options that the RadBadgeView provides. You can change the Badge BackgroundColor, Text and TextColor, Horizontal and Vertical Position and Alignment, Offset, Animation Duration and Animation Easing.</Description>
        </Example>
      </Examples>
    </Control>

    <Control>
      <Name>Barcode</Name>
      <DisplayName>Barcode</DisplayName>
      <Icon>barcode.png</Icon>
      <ShortDescription>UI component used for creating and showing 1D and 2D barcodes.</ShortDescription>
      <FullDescription>Telerik Barcode for .NET MAUI is a control used for creating and showing barcodes. You can generate and visualize barcodes in a machine-readable format via the RadBarcode control by providing numeric or character data.</FullDescription>
      <Examples>
        <Example>
          <Name>BoardingPass</Name>
          <Page>BoardingPassView</Page>
          <DisplayName>Boarding Pass</DisplayName>
          <Icon>barcode.png</Icon>
          <Description>This example demonstrates how RadBarcode can be used to display a 2D QR code inside a sample boarding pass page of an application. The QR code system has become popular due to its fast readability and great storage capacity. QR codes are often used in applications to encode links, map locations, contact cards and other data.</Description>
        </Example>
        <Example>
          <Name>DataMatrix</Name>
          <Page>DataMatrixView</Page>
          <DisplayName>Data Matrix</DisplayName>
          <Icon>barcode.png</Icon>
          <Description>Data Matrix barcode is a two-dimensional type of code used widely in industry for marking small parts and items due to its high data density and reliability.</Description>
        </Example>
        <Example>
          <Name>SpecialOffer</Name>
          <Page>SpecialOfferView</Page>
          <DisplayName>Special Offer</DisplayName>
          <Icon>barcode.png</Icon>
          <Description>In this example a Barcode for .NET MAUI is used to generate a linear (1D) barcode in order to identify a discount coupon. With RadBarcode you can choose between several types of 1D and 2D barcode symbologies and have also control over the visual appearance and sizing of your barcodes.</Description>
        </Example>
        <Example>
          <Name>Barcode1DGallery</Name>
          <Page>Barcode1DGalleryView</Page>
          <DisplayName>1D Barcode Gallery</DisplayName>
          <Icon>barcode.png</Icon>
          <Description>This example demonstrates the different linear (1D) barcodes the RadBarcode could generate including the most popular ones such as EAN13, EAN8, UPC-A, UPC-E and Code39.</Description>
        </Example>
        <Example>
          <Name>SwissQRCode</Name>
          <Page>SwissQRCodeView</Page>
          <DisplayName>Swiss QR Code</DisplayName>
          <Icon>barcode.png</Icon>
          <Description>With RadBarcode you could generate a SwissQRCode, which contains all the information needed for an automatic and efficient payment.</Description>
        </Example>
      </Examples>
    </Control>

	  <Control>
		  <Name>Border</Name>
		  <Icon>border.png</Icon>
		  <DisplayName>Border</DisplayName>
		  <ShortDescription>Gives you full control over the look &amp; feel of the border that wraps around your .NET MAUI views.</ShortDescription>
		  <FullDescription>With Telerik RadBorder for .NET MAUI you will have full control over the look &amp; feel of the border that wraps around your .NET MAUI views. You could surround any view such as Label, Image, and so on and specify different border thickness and corner radius on each side.</FullDescription>
		  <Examples>
			  <Example>
				  <Name>FirstLook</Name>
				  <Page>FirstLookView</Page>
				  <DisplayName>First Look</DisplayName>
				  <Icon>border.png</Icon>
				  <Description>This example demonstrates the most commonly used features of the RadBorder.</Description>
			  </Example>
              <Example>
				  <ExcludeFrom>Android,iOS,MacCatalyst,WinUI</ExcludeFrom>
                  <Name>Configuration</Name>
                  <Page>ConfigurationView</Page>
                  <DisplayName>Configuration</DisplayName>
                  <Icon>border.png</Icon>
                  <Description>RadBorder provides a few useful properties for configuring its color, thickness and corner radius. This example lets you play with these properties and see the result right away.</Description>
              </Example>
		  </Examples>
	  </Control>

	  <Control>
		  <Name>BusyIndicator</Name>
		  <Icon>busyindicator.png</Icon>
		  <DisplayName>BusyIndicator</DisplayName>
		  <ShortDescription>Provides an easy way to display a busy or a loading indication.</ShortDescription>
		  <FullDescription>Telerik RadBusyIndicator enables you to display a notification whenever a longer-running process is being handled by the application. This makes the UI more informative and the user experience smoother. It also allows to easily customize the appearance and even implement custom animations.</FullDescription>
		  <Examples>
			  <Example>
				  <Name>FirstLook</Name>
				  <Page>FirstLookView</Page>
				  <DisplayName>First Look</DisplayName>
				  <Icon>busyindicator.png</Icon>
				  <Description>This example demonstrates the most commonly used features of the BusyIndicator. Here, the animation type is changed, also a custom color is set, and custom values for the size of the animation content are given.</Description>
			  </Example>
		  </Examples>
	  </Control>

    <Control>
      <Name>Button</Name>
      <DisplayName>Button</DisplayName>
      <Icon>button.png</Icon>
      <ShortDescription>Enhances the .NET MAUI Button by providing additional features related to UI customizations.</ShortDescription>
      <FullDescription>The Telerik RadButton enhances the Maui Button by providing additional features such as the ability to set a background image, change the border thickness, and the alignment of the button's content.</FullDescription>
      <Examples>
        <Example>
          <Name>FirstLook</Name>
          <Page>FirstLookView</Page>
          <DisplayName>First Look</DisplayName>
          <Icon>button.png</Icon>
          <Description>This example demonstrates different styling options that can be applied to a RadButton. By taking advantage of the RadButton's API and Styles, you can easily achieve the desired look across your whole application.</Description>
        </Example>
      </Examples>
    </Control>

    <Control>
      <Name>Chart</Name>
      <DisplayName>Chart</DisplayName>
      <Icon>chartbar.png</Icon>
      <ShortDescription>Large collection of chart and graph types for data visualization.</ShortDescription>
      <FullDescription>Telerik UI for .NET MAUI Chart is a feature-rich, intuitive and easy to use data visualization control which employs the Maui technology and allows you to build native apps in C# and XAML.</FullDescription>
      <FeedbackPortalUrl>https://feedback.telerik.com/maui?listMode=Recent&amp;categoryId=2334</FeedbackPortalUrl>
      <Examples>
        <Example>
          <Name>AreaSeries</Name>
          <Page>AreaSeriesView</Page>
          <DisplayName>Area Series</DisplayName>
          <Icon>chartarea.png</Icon>
          <Description>Area charts display different colors in the areas below the lines. This colorful and visual display distinguishes the data clearly. The Area charts support Stack, Stack100 and standard plotting modes.</Description>
        </Example>
        <Example>
          <Name>BarSeries</Name>
          <Page>BarSeriesView</Page>
          <DisplayName>Bar Series</DisplayName>
          <Icon>chartbar.png</Icon>
          <Description>Bar chart is one of the most common type of graphs used to display data. Sometimes known as 'column charts' depending on the orientation, bar charts are used to visualize data points as bar blocks where the width/height of each bar denotes the magnitude of its value.</Description>
        </Example>
        <Example>
          <Name>FinancialSeries</Name>
          <Page>FinancialSeriesView</Page>
          <DisplayName>Financial Series</DisplayName>
          <Icon>chartfinancial.png</Icon>
          <Description>The financial series are represented by the OhlcSeries and CandlestickSeries classes which differ in the way they visualize the data point. OHLC stands for Open, High, Low and Close.</Description>
        </Example>
        <Example>
          <Name>FinancialIndicators</Name>
          <Page>FinancialIndicatorsView</Page>
          <DisplayName>Financial Indicators</DisplayName>
          <Icon>chartfinancialindicator.png</Icon>
          <Description>The financial indicators are a collection of DataPoints (calculated with different algorithms using the series data) visualized using Line Shape.</Description>
          <Icon>chartfinancialindicator.png</Icon>
        </Example>
        <Example>
          <Name>LineSeries</Name>
          <Page>LineSeriesView</Page>
          <DisplayName>Line Series</DisplayName>
          <Icon>chartline.png</Icon>
          <Description>Line charts are often used to plot changes in data over time, such as monthly temperature changes or daily changes in stock market prices. If you are plotting changes in data over time, time is plotted along the horizontal axis and your other data is plotted as individual points along the vertical axis.</Description>
        </Example>
        <Example>
          <Name>NullValues</Name>
          <Page>NullValuesView</Page>
          <DisplayName>Null Values</DisplayName>
          <Icon>chartnullvalues.png</Icon>
          <Description>Line charts and area charts can visualize null values as gaps in the chart.</Description>
        </Example>
        <Example>
          <Name>ScatterSeries</Name>
          <Page>ScatterSeriesView</Page>
          <DisplayName>ScatterSeries</DisplayName>
          <Icon>chartscatter.png</Icon>
          <Description>A scatter chart is a two-dimensional graphical representation of a set of data where each x/y variable is represented on the graph as a dot. This type of chart can be used in to visually describe relationships between two numerical parameters or to represent distributions.</Description>
        </Example>
        <Example>
          <Name>PieDonutSeries</Name>
          <Page>PieDonutSeriesView</Page>
          <DisplayName>Pie &amp; Donut Series</DisplayName>
          <Icon>chartpie.png</Icon>
          <Description>The pie chart visualizes its data in the shape of a pie. Each data item is visually represented by a pie/donut slice. The ratio between the space consumed by each slice and the space consumed by the whole chart is the same as the ratio between the value of the data point that it represents and the total value of all data points in the series.</Description>
        </Example>
      </Examples>
    </Control>

	<Control>
		<Name>CheckBox</Name>
		<DisplayName>CheckBox</DisplayName>
		<Icon>checkbox.png</Icon>
		<ShortDescription>Enables users to choose between two mutually exclusive options.</ShortDescription>
		<FullDescription>Telerik CheckBox for .NET MAUI is a checkbox control which enables users to make a choice between two mutually exclusive options. In addition, RadCheckBox provides indeterminate state which indicates the control is neither checked nor unchecked. RadCheckBox exposes various Color properties you could use to customize its visual appearance, so that it matches the look &amp; feel of your app.</FullDescription>
		<Examples>
			<Example>
				<Name>FirstLook</Name>
				<Page>FirstLookView</Page>
				<DisplayName>First Look</DisplayName>
				<Icon>checkbox.png</Icon>
				<Description>This example demonstrates how you could use a series of RadCheckBox controls, so that the end user may select several of the provided choices.</Description>
			</Example>
		</Examples>
	</Control>

	<Control>
		<Name>ComboBox</Name>
		<DisplayName>ComboBox</DisplayName>
		<Icon>combobox.png</Icon>
		<ShortDescription>Allows users to select item/items from a drop-down list of items.</ShortDescription>
		<FullDescription>Telerik ComboBox for .NET MAUI allows users to select item/items from a drop-down list of items. The control has a number of features such as editing, searching, single and multiple selection, flexible styling API, dropdown customizations and more.</FullDescription>
		<Examples>
			<Example>
				<Name>FirstLook</Name>
				<Page>FirstLookView</Page>
				<DisplayName>First Look</DisplayName>
				<Icon>combobox.png</Icon>
				<Description>The example demonstrates the ComboBox main features - searching, selection - both Single and Multiple, editing and how they can be used in a job search scenario.</Description>
			</Example>
		</Examples>
	</Control>
			
    <Control>
      <Name>DataGrid</Name>
      <DisplayName>DataGrid</DisplayName>
      <Icon>datagrid.png</Icon>
      <ShortDescription>Powerful and feature-rich control used to visualize and edit data represented in a tabular fashion.</ShortDescription>
      <FullDescription>Telerik RadDataGrid control provides the ability to easily perform operations like sorting, filtering, grouping and editing over the underlying data.</FullDescription>
      <Examples>
        <Example>
          <Name>FirstLook</Name>
          <Page>FirstLookView</Page>
          <DisplayName>First Look</DisplayName>
          <Icon>datagrid.png</Icon>
          <Description>Demonstrates how you can easily configure the DataGrid to display data and perform data operations on it.</Description>
        </Example>
        <Example>
			<ExcludeFrom>Android,iOS,MacCatalyst,WinUI</ExcludeFrom>
            <Name>BillionCells</Name>
            <Page>BillionCellsView</Page>
            <DisplayName>One Billion Cells</DisplayName>
            <Icon>datagrid.png</Icon>
            <Description>Demonstrates how you can easily store big clusters of data in the DataGrid</Description>
        </Example>
        <Example>
          <Name>ColumnTypes</Name>
          <Page>ColumnTypesView</Page>
          <DisplayName>Column Types</DisplayName>
          <Icon>datagrid.png</Icon>
          <Description>Demonstrates the different type of columns that DataGrid control provides. Column types such as Text, Boolean, Template, Date, Time, Numeric.</Description>
        </Example>
        <Example>
          <Name>Selection</Name>
          <Page>SelectionView</Page>
          <DisplayName>Selection</DisplayName>
          <Icon>datagrid.png</Icon>
          <IsConfigurable>true</IsConfigurable>
          <Description>Demonstrates the DataGrid Selection feature. You can easily disable the selection, apply single or multiple selection. When selection is on, it can be applied to DataGrid Cell or Row.</Description>
       </Example>
		  <Example>
			  <Name>Customization</Name>
			  <Page>CustomizationView</Page>
			  <DisplayName>Customization</DisplayName>
			  <Icon>datagrid.png</Icon>
			  <Description>Demonstrates how you could customize the visual appearance of the DataGrid control through various Style and StyleSelector properties such as CellContentStyle, CellDecorationStyle, SelectionStyle, GroupHeaderStyleSelector, etc.</Description>
		  </Example>
      </Examples>
    </Control>

    <Control>
      <Name>DatePicker</Name>
      <DisplayName>DatePicker</DisplayName>
      <Icon>datepicker.png</Icon>
      <ShortDescription>Enables users to easily and intuitively select a date via a customizable spinner dialog.</ShortDescription>
      <FullDescription>Telerik UI for .NET MAUI DatePicker allows the users to select a date. Its items are visualized inside a popup. Date Picker control has a number of features which allows you to set a date range, date format, and fully customize the dialog appearance such as its header and footer.</FullDescription>
      <Examples>
        <Example>
          <Name>FirstLook</Name>
          <Page>FirstLookView</Page>
          <DisplayName>First Look</DisplayName>
          <Icon>datepicker.png</Icon>
          <Description>RadDatePicker provides the users an easy way to pick a date. The control allows you to define minimum and maximum date. This example demonstrates how you can setup the DatePicker control, so the app users can pick a date and send a request to work remotely.</Description>
        </Example>
      </Examples>
    </Control>

    <Control>
      <Name>DateTimePicker</Name>
      <DisplayName>DateTimePicker</DisplayName>
      <Icon>datetimepicker.png</Icon>
      <ShortDescription>Provides an easy way to pick a date, time or date and time via a customizable spinner dialog.</ShortDescription>
      <FullDescription>Telerik UI for .NET MAUI DateTimePicker enables users to easily pick a date, time or both from a pre-defined set of values. The DateTimePicker control has several features which allow you to set a date range, date and time format and fully customize the dialog appearance.</FullDescription>
      <Examples>
        <Example>
          <Name>FirstLook</Name>
          <Page>FirstLookView</Page>
          <DisplayName>First Look</DisplayName>
          <Icon>datetimepicker.png</Icon>
          <Description>This example demonstrates how you can setup the DateTime Picker control and choose date and time in the same UI.</Description>
        </Example>
      </Examples>
    </Control>

    <Control>
      <Name>DockLayout</Name>
      <DisplayName>DockLayout</DisplayName>
      <Icon>docklayout.png</Icon>
      <ShortDescription>Enables users to dock child elements of the application at a certain position on the screen.</ShortDescription>
      <FullDescription>Telerik UI for .NET MAUI DockLayout is a layout that provides a mechanism for child elements to be docked to the left, right, top or bottom edge of the layout. You could easily define the docking side of each element through a RadDockLayout.Dock attached property. In addition, you can determine whether the last child element inside the layout will occupy the remaining available space.</FullDescription>
      <Examples>
        <Example>
          <Name>FirstLook</Name>
          <Page>FirstLookView</Page>
          <DisplayName>First Look</DisplayName>
          <Icon>docklayout.png</Icon>
          <Description>Demonstrates how you can easily configure the DockLayout and align the children as per your requirements.</Description>
        </Example>
      </Examples>
    </Control>

    <Control>
      <Name>Entry</Name>
      <DisplayName>Entry</DisplayName>
      <Icon>entry.png</Icon>
      <ShortDescription>Enhances the Maui Entry by providing means for customizing its look and adding an input validation feature.</ShortDescription>
      <FullDescription>Telerik UI for .NET MAUI Entry is a text input control, which accepts text input from the user and provides consistent look and feel with the rest of the Telerik UI for .NET MAUI. It also has a validation API and corresponding error UI.</FullDescription>
      <Examples>
        <Example>
          <Name>FirstLook</Name>
          <Page>FirstLookView</Page>
          <DisplayName>First Look</DisplayName>
          <Icon>entry.png</Icon>
          <Description>Demonstrates how you could utilize the key features of RadEntry.</Description>
        </Example>
        <Example>
			<ExcludeFrom>Android,iOS,MacCatalyst,WinUI</ExcludeFrom>
            <Name>Configuration</Name>
            <Page>ConfigurationView</Page>
            <DisplayName>Configuration</DisplayName>
            <Icon>entry.png</Icon>
            <Description>This example presents various configuration options that the RadEntry control provides..</Description>
        </Example>
      </Examples>
    </Control>

    <Control>
      <Name>Gauge</Name>
      <DisplayName>Gauge</DisplayName>
      <Icon>gauge.png</Icon>
      <ShortDescription>Set of highly customizable, animated and user-friendly linear and radial gauges.</ShortDescription>
      <FullDescription>Telerik Gauge is an essential data visualization component that uses indicators to display numeric values, and uses ranges to give a context to the indicated values.</FullDescription>
      <Examples>
        <Example>
          <Name>FirstLook</Name>
          <Page>FirstLookView</Page>
          <DisplayName>First Look</DisplayName>
          <Icon>gauge.png</Icon>
          <Description>Demonstrates the customization abilities of the Gauge. Indicators with different colors that present different values can easily be added.</Description>
        </Example>
      </Examples>
    </Control>

    <Control>
      <Name>ItemsControl</Name>
      <DisplayName>ItemsControl</DisplayName>
      <Icon>itemscontrol.png</Icon>
      <ShortDescription>Enables users to visualize a list of items and customize the way each item looks using the provided template.</ShortDescription>
      <FullDescription>Telerik UI for .NET MAUI ItemsControl enables you to visualize a list of items and provides full control over the way each item is rendered through the supported item template.</FullDescription>
      <Examples>
        <Example>
          <Name>FirstLook</Name>
          <Page>FirstLookView</Page>
          <DisplayName>FirstLook</DisplayName>
          <Icon>itemscontrol.png</Icon>
          <Description>This example demonstrates basic usage of the ItemsControl where a custom DataTemplate is provided.</Description>
        </Example>
      </Examples>
    </Control>

    <Control>
      <Name>ListPicker</Name>
      <DisplayName>ListPicker</DisplayName>
      <Icon>listpicker.png</Icon>
      <ShortDescription>Allows users to select an item from a list, visualized inside a customizable spinner dialog.</ShortDescription>
      <FullDescription>Telerik RadListPicker provides an elegant UI experience for end users who need to pick an item from a pre-defined list. The ListPicker component loops its listed items infinitely while scrolling and is flexible to various customizations to ensure consistent user experience across the mobile applications. Developers can easily customize the dialog appearance, style the listed and selected items and define a placeholder text when an item is not selected.</FullDescription>
      <Examples>
        <Example>
          <Name>FirstLook</Name>
          <Page>FirstLookView</Page>
          <DisplayName>First Look</DisplayName>
          <Icon>listpicker.png</Icon>
          <Description>RadListPicker can be useful in various scenarios when you'd like to give the app users a convenient way to choose a value from a list of items. This example presents a sample scenario for selecting a music genre.</Description>
        </Example>
      </Examples>
    </Control>

    <Control>
      <Name>ListView</Name>
      <DisplayName>ListView</DisplayName>
      <Icon>listview.png</Icon>
      <ShortDescription>Virtualized list control that provides the most commonly needed features when displaying a list of items.</ShortDescription>
      <FullDescription>Telerik UI for .NET MAUI ListView is a virtualized high-performance list component that provides the most popular features associated with scenarios where a list of items is used. All these features are embedded in one control with the idea to save developer time and provide better experience. The control's features include different layouts, pull-to-refresh, grouping, swipe gesture, changing the items order by a drag and drop operation and more.</FullDescription>
      <Examples>
        <Example>
          <Name>FirstLook</Name>
          <Page>FirstLookView</Page>
          <DisplayName>First Look</DisplayName>
          <Icon>listview.png</Icon>
          <Description>The example demonstrates how to customize the cells inside the control using a TemplateCell.</Description>
        </Example>
      </Examples>
    </Control>

    <Control>
      <Name>Map</Name>
      <DisplayName>Map</DisplayName>
      <Icon>map.png</Icon>
      <ShortDescription>Visualizes stunning map overlays through ESRI Shapefiles straight into your application.</ShortDescription>
      <FullDescription>Telerik UI for .NET MAUI Map lets you display stunning map overlays using ESRI Shapefiles. The control provides support for labels, multiple, single selection and powerful customization APIs.</FullDescription>
      <Examples>
        <Example>
          <Name>FirstLook</Name>
          <Page>FirstLookView</Page>
          <Icon>map.png</Icon>
          <Description>An example that demonstrates how the Map can easily visualize an embedded into your application ESRI Shapefile.</Description>
          <DisplayName>First Look</DisplayName>
        </Example>
      </Examples>
    </Control>

    <Control>
      <Name>MaskedEntry</Name>
      <DisplayName>MaskedEntry</DisplayName>
      <Icon>maskedentry.png</Icon>
      <ShortDescription>Provides an easy way to restrict user input to most commonly used masked input types.</ShortDescription>
      <FullDescription>Telerik UI for .NET MAUI MaskedEntry formats and restricts text inputs to predefined or defined patterns, and provides input validation and masks, such as text, Regex, IP, email, and numeric.</FullDescription>
      <Examples>
        <Example>
          <Name>FirstLook</Name>
          <Page>FirstLookView</Page>
          <DisplayName>First Look</DisplayName>
          <Icon>maskedentry.png</Icon>
          <Description>The example shows the different masked types like Text, Email, IP, Numeric, Regex.</Description>
        </Example>
      </Examples>
    </Control>

    <Control>
      <Name>NumericInput</Name>
      <DisplayName>NumericInput</DisplayName>
      <Icon>numericinput.png</Icon>
      <ShortDescription>Highly customizable input control for entering numeric data.</ShortDescription>
      <FullDescription>Telerik UI for .NET MAUI NumericInput is a highly customizable input control for numeric data. It allows the user to set/edit a number using the decrease and increase buttons or directly enter it in the input field. RadNumericInput also provides consistent look with the rest of the controls from the Telerik UI for .NET MAUI suite.</FullDescription>
      <Examples>
        <Example>
          <Name>FirstLook</Name>
          <Page>FirstLookView</Page>
          <DisplayName>First Look</DisplayName>
          <Icon>numericinput.png</Icon>
          <Description>Demonstrates how you could use RadNumericInput to enable the end users easily enter numeric data and to achieve slick design across all platforms.</Description>
        </Example>
      </Examples>
    </Control>

    <Control>
      <Name>Path</Name>
      <Icon>path.png</Icon>
      <DisplayName>Path</DisplayName>
      <ShortDescription>Draws complex shapes composed of different geometries as arcs, ellipses, lines and rectangles.</ShortDescription>
      <FullDescription>Telerik UI for .NET MAUI Path is a control which can be used to draw complex shapes that can be composed of different geometries like arcs, ellipses, lines and rectangles.</FullDescription>
      <Examples>
        <Example>
          <Name>Figures</Name>
          <Page>FiguresView</Page>
          <DisplayName>Figures</DisplayName>
          <Icon>path.png</Icon>
          <Description>Demonstrates RadPath elements with different figures that are defined fully in XAML via geometry descriptions.</Description>
        </Example>
      </Examples>
    </Control>

    <Control>
      <Name>PdfProcessing</Name>
      <DisplayName>PdfProcessing</DisplayName>
      <Icon>pdfprocessing.png</Icon>
      <ShortDescription>Processing library that allows creation, import and export of PDF documents. </ShortDescription>
      <FullDescription>The API of PdfProcessing contains two different editors, enabling you to choose between editing in a flow-like manner, or using the much more powerful and flexible fixed document structure and drawing on the page.</FullDescription>
      <Examples>
        <Example>
          <Name>FirstLook</Name>
          <Page>FirstLookView</Page>
          <DisplayName>Generate Pdf document</DisplayName>
          <Icon>pdfprocessing.png</Icon>
          <Description>Telerik PdfProcessing provides easy to use API which allows code-only generation of PDF documents. This example demonstrates how to create a document containing images, text and shapes and export it to PDF.</Description>
        </Example>
		  <Example>
			  <Name>NotEmbeddingFonts</Name>
			  <Page>NotEmbeddingFontsView</Page>
			  <DisplayName>Not Embedding Fonts</DisplayName>
			  <Icon>pdfprocessing.png</Icon>
			  <Description>Telerik PdfProcessing provides easy to use API which allows choosing whether the font files to be embedded when exporting PDF documents. This example shows the initial size of an imported document and the reduced one after removing the fonts and saving it. Disclaimer: Removing the fonts from the document makes it dependent on the operational system to provide the needed fonts. If they are not installed, the document won't be successfully opened.</Description>
		  </Example>
      </Examples>
    </Control>

    <Control>
      <Name>Popup</Name>
      <DisplayName>Popup</DisplayName>
      <Icon>popup.png</Icon>
      <ShortDescription>Displays an alert dialog or a popup in the mobile app in a position of your choice.</ShortDescription>
      <FullDescription>Telerik UI for .NET MAUI Popup lets you display content of your choice on top of existing view. You could define whether the Popup will be modal or not as well as control its position through various placement settings.</FullDescription>
      <Examples>
        <Example>
            <Name>ContextMenu</Name>
            <Page>ContextMenuView</Page>
            <DisplayName>First Look</DisplayName>
            <Icon>popup.png</Icon>
            <Description>This example demonstrates how you could use RadPopup control as a context menu - you can host any content inside the Popup and easily position it according to the target element.</Description>
        </Example>
      </Examples>
    </Control>

    <Control>
      <Name>Rating</Name>
      <DisplayName>Rating</DisplayName>
      <Icon>rating.png</Icon>
      <ShortDescription>Allows users to intuitively rate by selecting number of items/stars from a predefined number.</ShortDescription>
      <FullDescription>Telerik UI for .NET MAUI Rating is a flexible UI component that allows users to intuitively rate by making a selection.</FullDescription>
      <Examples>
        <Example>
          <Name>RestaurantReview</Name>
          <Page>RestaurantReviewView</Page>
          <DisplayName>Restaurant Review</DisplayName>
          <Icon>rating.png</Icon>
          <Description>Demonstrates basic usage of the RadRating where the component is defined in XAML and some of the API that affects it appearance has been used.</Description>
        </Example>
      </Examples>
    </Control>

    <Control>
      <Name>SegmentedControl</Name>
      <DisplayName>SegmentedControl</DisplayName>
      <Icon>segmentedcontrol.png</Icon>
      <ShortDescription>Displays horizontally aligned, mutually exclusive options, which can be selected by the user.</ShortDescription>
      <FullDescription>Telerik UI for .NET MAUI SegmentedControl enables you to display several options in a convenient picker and select value with a single tap.</FullDescription>
      <Examples>
        <Example>
          <Name>FirstLook</Name>
          <Page>FirstLookView</Page>
          <DisplayName>First Look</DisplayName>
          <Icon>segmentedcontrol.png</Icon>
          <Description>This example showcases the usage of the SegmentedControl in a MVVM environment. Images can easily be displayed in the SegmentedControl, and styles can be used to achieve the same look for the SegmentedControl's in your application.</Description>
        </Example>
      </Examples>
    </Control>

    <Control>
      <Name>SideDrawer</Name>
      <DisplayName>SideDrawer</DisplayName>
      <Icon>sidedrawer.png</Icon>
      <ShortDescription>SideDrawer for .NET MAUI is designed to enable users to visualize a hidden view in their applications.</ShortDescription>
      <FullDescription>Telerik UI for .NET MAUI SideDrawer allows you to visualize a hidden view inside your application. The control has two views, Maincontent and DrawerContent. The hiddenview (DrawerContent) can be visualized using a flick gesture and can be shown from all four sides of the screen.</FullDescription>
      <Examples>
        <Example>
          <Name>FirstLook</Name>
          <Page>FirstLookView</Page>
          <DisplayName>First Look</DisplayName>
          <Icon>sidedrawer.png</Icon>
          <Description>This example shows the RadSideDrawer which contains in the hidden view all available Telerik UI for .NET MAUI controls separated in categories.</Description>
        </Example>
      </Examples>
    </Control>

    <Control>
      <Name>SpreadProcessing</Name>
      <DisplayName>SpreadProcessing</DisplayName>
      <Icon>spreadstreamprocessing.png</Icon>
      <ShortDescription>Easily import, modify and export files to and from the most common spreadsheet file formats.</ShortDescription>
      <FullDescription>This library enables you to work with spreadsheet documents – create ones from scratch, modify existing documents or convert between the most common spreadsheet formats.</FullDescription>
      <Examples>
        <Example>
          <Name>FirstLook</Name>
          <Page>FirstLookView</Page>
          <DisplayName>First Look</DisplayName>
          <Icon>spreadstreamprocessing.png</Icon>
          <Description>Telerik SpreadProcessing library provides easy to use API to create, modify, and convert spreadsheet documents. This example demonstrates how to create a document.</Description>
        </Example>
        <Example>
          <Name>Convert</Name>
          <Page>ConvertView</Page>
          <DisplayName>Convert</DisplayName>
          <Icon>spreadstreamprocessing.png</Icon>
          <Description>An example that demonstrates how to import documents and convert to different formats.</Description>
        </Example>
        <Example>
          <Name>FindAndReplace</Name>
          <Page>FindAndReplaceView</Page>
          <DisplayName>Find &amp; Replace</DisplayName>
          <Icon>spreadstreamprocessing.png</Icon>
          <Description>A demonstration of the built-in Find and Replace functionality in the SpreadProcessing library.</Description>
        </Example>
		<Example>
			<Name>ConditionalFormatting</Name>
			<Page>ConditionalFormattingView</Page>
			<DisplayName>Conditional Formatting</DisplayName>
			<Icon>spreadstreamprocessing.png</Icon>
			<Description>Telerik SpreadProcessing supports conditional visual formatting based on the underlying data of the worksheet. It allows you to create new rules, or modify existing ones. The current example demostrates how to add conditional formatting elements programatically, while showcasing some of the rule options.</Description>
		</Example>
		<Example>
			<Name>AddNotes</Name>
			<Page>AddNotesView</Page>
			<DisplayName>Add Notes</DisplayName>
			<Icon>spreadstreamprocessing.png</Icon>
			<Description>Telerik SpreadProcessing allows you to insert a Note related to a cell on a specific document position. The example demonstrates how you can add notes with custom Author and Text while generating a document, and then view the document.</Description>
		</Example>
		<Example>
			<Name>AddComments</Name>
			<Page>AddCommentsView</Page>
			<DisplayName>Add Comments</DisplayName>
			<Icon>spreadstreamprocessing.png</Icon>
			<Description>Telerik SpreadProcessing allows you to insert a Comment related to a cell. The example demonstrates how you can add comments with custom Author and Text while generating a document, and then view the document.</Description>
		</Example>
      </Examples>
    </Control>

    <Control>
      <Name>SpreadStreamProcessing</Name>
      <DisplayName>SpreadStreamProcessing</DisplayName>
      <Icon>spreadstreamprocessing.png</Icon>
      <ShortDescription>Create big spreadsheet documents with great performance and minimal memory footprint.</ShortDescription>
      <FullDescription>Telerik SpreadStreamProcessing is a document processing library which allows you to create big spreadsheet documents with great performance and minimal memory footprint.</FullDescription>
      <Examples>
        <Example>
          <Name>FirstLook</Name>
          <Page>FirstLookView</Page>
          <DisplayName>Generate Spreadsheet</DisplayName>
          <Icon>spreadstreamprocessing.png</Icon>
          <Description>The example demonstrates how to generate spreadsheet document using SpreadStreamProcessing library.</Description>
        </Example>
      </Examples>
    </Control>

    <Control>
      <Name>TabView</Name>
      <DisplayName>TabView</DisplayName>
      <Icon>tabview.png</Icon>
      <ShortDescription>TabView for .NET MAUI is a flexible navigation control with tabbed interface.</ShortDescription>
      <FullDescription>Telerik UI for .NET MAUI TabView is a flexible navigation control that allows you to build tabbed interfaces. Each tabview item has an associated content displayed on selection. The control is fully customizable.</FullDescription>
      <Examples>
        <Example>
          <Name>WorldClock</Name>
          <Page>WorldClockView</Page>
          <DisplayName>World Clock</DisplayName>
          <Icon>tabview.png</Icon>
          <Description>Demonstartes the main features of the TabView control like header scrolling, disabled tabs, swiping in the TabView content and header.</Description>
        </Example>
      </Examples>
    </Control>

	  <Control>
		  <Name>TemplatedPicker</Name>
		  <DisplayName>TemplatedPicker</DisplayName>
		  <ShortDescription>Fully customizable picker control that covers a wide range of item selection scenarios.</ShortDescription>
		  <Icon>templatedpicker.png</Icon>
		  <FullDescription>Telerik UI for .NET MAUI TemplatedPicker is a control designed to support the need for a tailored item selection based on various potential end-user scenarios (e.g. pick a country and city for a travel app). The Templated Picker enables you to define your custom template for an item selection and customize it to ensure user experience consistency across your application.</FullDescription>
		  <Examples>
			  <Example>
				  <Description>Demonstrates how you can utilize RadTemplatedPicker in a sample scenario for selecting t-shirt color and size. Through the custom selector template you can place any content inside the picker popup based on the scenario at hand.</Description>
				  <Icon>templatedpicker.png</Icon>
				  <Page>FirstLookView</Page>
				  <Name>FirstLook</Name>
				  <DisplayName>First Look</DisplayName>
			  </Example>
		  </Examples>
	  </Control>
	  
    <Control>
      <Name>TimePicker</Name>
      <DisplayName>TimePicker</DisplayName>
      <Icon>timepicker.png</Icon>
      <ShortDescription>Provides a convenient way for the app users to select a time via a customizable spinner dialog.</ShortDescription>
      <FullDescription>Telerik UI for .NET MAUI TimePicker provides a convenient way for the app users to select a time. Its items are visualized inside a popup. The control has a number of features which allows you to set a time range, time format and fully customize the dialog appearance such as its header and footer.</FullDescription>
      <Examples>
        <Example>
          <Name>FirstLook</Name>
          <Page>FirstLookView</Page>
          <DisplayName>First Look</DisplayName>
          <Icon>timepicker.png</Icon>
          <Description>This example demonstrates how you can setup the TimePicker control so the app users can book a time for cleaning service.</Description>
        </Example>
      </Examples>
    </Control>

    <Control>
      <Name>TimeSpanPicker</Name>
      <DisplayName>TimeSpanPicker</DisplayName>
      <Icon>timespanpicker.png</Icon>
      <ShortDescription>Provides an easy way to select a time duration via a customizable spinner dialog.</ShortDescription>
      <FullDescription>Telerik UI for .NET MAUI TimeSpanPicker provides an easy way to select a time duration. TimeSpan control represents a time interval and allows you to set a time range between two times measured in numbers of days, hours, minutes and seconds.</FullDescription>
      <Examples>
        <Example>
          <Name>FirstLook</Name>
          <Page>FirstLookView</Page>
          <DisplayName>First Look</DisplayName>
          <Icon>timespanpicker.png</Icon>
          <Description>RadTimeSpanPicker provides the users an easy way to select a time interval. The control allows you to define minimum and maximum time. This example demonstrates how you can setup the TimeSpanPicker control, so the app users can select a maximum flight duration.</Description>
        </Example>
      </Examples>
    </Control>

    <Control>
      <Name>WordsProcessing</Name>
      <DisplayName>WordsProcessing</DisplayName>
      <Icon>wordsprocessing.png</Icon>
      <ShortDescription>Processing library that allows creation, import and export of DOCX documents.</ShortDescription>
      <FullDescription>Telerik WordsProcessing is a processing library that allows code-only generation of documents. Through the API you can create a document from scratch and export it to one of the supported formats – Docx, Rtf, Html, PDF and Txt.</FullDescription>
      <Examples>
        <Example>
          <Name>FirstLook</Name>
          <Page>FirstLookView</Page>
          <DisplayName>First Look</DisplayName>
          <Icon>wordsprocessing.png</Icon>
          <Description>This example demonstrates how to create a document containing images, text and shapes and export it to DOCX, RTF, HTML, TXT.</Description>
        </Example>
		  <Example>
			  <Name>Export</Name>
			  <Page>ExportView</Page>
			  <DisplayName>Export</DisplayName>
			  <Icon>wordsprocessing.png</Icon>
			  <Description>This example demonstrates export of flow documents to PDF, RTF, HTML and TXT using RadWordsProcessing. You can use the imported Word(docx) sample and convert it to PDF, RTF, HTML, TXT.</Description>
		  </Example>
		  <Example>
			  <Name>FindAndReplace</Name>
			  <Page>FindAndReplaceView</Page>
			  <DisplayName>Find &amp; Replace</DisplayName>
			  <Icon>wordsprocessing.png</Icon>
			  <Description>This example illustrates the Replace functionality in RadWordsProcessing. You can replace or highlight text in the sample document, using regular expressions or strings and then export the document to view the result.</Description>
		  </Example>
      </Examples>
    </Control>

    <Control>
      <Name>WrapLayout</Name>
      <DisplayName>WrapLayout</DisplayName>
      <Icon>wraplayout.png</Icon>
      <ShortDescription>Provides a mechanism for arranging child elements in rows or columns.</ShortDescription>
      <FullDescription>Telerik UI for .NET MAUI WrapLayout provides a mechanism for arranging child elements in rows or columns depending on the Orientation property. When the available space is filled, the control wraps these elements on а new row or column.</FullDescription>
      <Examples>
        <Example>
          <Name>FirstLook</Name>
          <Page>FirstLookView</Page>
          <DisplayName>First Look</DisplayName>
          <Icon>wraplayout.png</Icon>
          <Description>This example demonstrates a horizontal arrangement of child elements.</Description>
        </Example>
      </Examples>
    </Control>

	<Control>
		<Name>ZipLibrary</Name>
		<DisplayName>ZipLibrary</DisplayName>
		<Icon>ziplibrary.png</Icon>
		<ShortDescription>Compress data like images, docx or pdf files and send them over the wire faster.</ShortDescription>
		<FullDescription>Telerik ZipLibrary provides easy-to-use API to both create and load zip files as well as browse the contents of a zip file previously created. The API supports password protection and different compression levels. You can also create ZIP files in memory or add data to ZIP file from stream.</FullDescription>
		<Examples>
			<Example>
				<Name>CreateArchive</Name>
				<Page>CreateArchiveView</Page>
				<DisplayName>Create Archive</DisplayName>
				<Icon>ziplibrary.png</Icon>
				<Description>An example demonstrating creating zip archive using ZipLibrary.</Description>
			</Example>
		</Examples>
	</Control>

  </Controls>

  <HighlightedControls>
    <HighlightedControl>
      <DisplayName>DataGrid</DisplayName>
      <Icon>datagrid_white.png</Icon>
    </HighlightedControl>
    <HighlightedControl>
      <DisplayName>ComboBox</DisplayName>
      <Icon>combobox_white.png</Icon>
    </HighlightedControl>
    <HighlightedControl>
      <DisplayName>Chart</DisplayName>
      <Icon>chartbar_white.png</Icon>
    </HighlightedControl>
  </HighlightedControls>

  <MauiHighlights>
    <MauiHighlight>
      <Icon>icon_sun.png</Icon>
      <Url>https://www.telerik.com/blogs/tag/sands-of-maui?utm_medium=product&amp;utm_source=appstoresamp&amp;utm_campaign=maui-awareness-maui-qsf-showcase</Url>
      <DisplayText>Sands of MAUI&#10;Newsletter</DisplayText>
    </MauiHighlight>
    <MauiHighlight>
      <Icon>icon_umbrella.png</Icon>
      <Url>https://www.telerik.com/blogs/mobile-net-maui?utm_medium=product&amp;utm_source=appstoresamp&amp;utm_campaign=maui-awareness-maui-qsf-showcase</Url>
      <DisplayText>Telerik Blogs: All&#10;About .NET MAUI</DisplayText>
    </MauiHighlight>
    <MauiHighlight>
      <Icon>icon_video.png</Icon>
      <Url>https://www.youtube.com/playlist?list=PLvmaC-XMqeBaqRbDn0cY9dVZEIt-Yu7HB</Url>
      <DisplayText>.NET Dev Show&#10;with Sam Basu</DisplayText>
    </MauiHighlight>
    <MauiHighlight>
      <Icon>icon_video.png</Icon>
      <Url>https://www.youtube.com/playlist?list=PLvmaC-XMqeBaQbJRhd_KYb1TViCdncggS</Url>
      <DisplayText>Snorkeling in&#10;MAUI 2022</DisplayText>
    </MauiHighlight>
  </MauiHighlights>

  <DemoApps>
    <DemoApp>
      <Icon>logo_cryptoapp.png</Icon>
      <DisplayText>Crypto Tracker</DisplayText>
      <Url>https://docs.telerik.com/devtools/maui/demos-and-sample-apps/crypto-app?utm_medium=product&amp;utm_source=appstores&amp;utm_campaign=maui-awareness-maui-qsf-showcase</Url>
    </DemoApp>
    <DemoApp>
      <Icon>logo_progress.png</Icon>
      <DisplayText>SDK Browser</DisplayText>
      <Url>https://docs.telerik.com/devtools/maui/demos-and-sample-apps/maui-demo-app?utm_medium=product&amp;utm_source=appstores&amp;utm_campaign=maui-awareness-maui-qsf-showcase</Url>
    </DemoApp>
    <DemoApp>
      <Icon>icon_csharp_cw.png</Icon>
    </DemoApp>
    <DemoApp>
      <Icon>icon_csharp_ccw.png</Icon>
    </DemoApp>
  </DemoApps>

</Configuration>
